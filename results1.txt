#imported re module to support regular expressions and will validate an email
import re

#validates what characters can be used within an email
regex = '^(\w|\.|\_|\-)+[@](\w|\_|\-|\.)+[.]\w{2,3}$'
test_1 = isalnum(3,16)
test_2 = isalnum(2, 8)
test_3 = "com", "edu", "org", "gov" 

def is_valid_email_address(s):
    
    # your code here
    #passes through the regular expression and the string in the search()
    if(re.search(regex, s))
        print("Valid Email Address")

    else:
        print("Invalid Email Address")

    #Part A: returns email address if valid within 3 to 16 characters 
    if (re.search(test_1,s)):
        return 1, "must contain 3 - 16 alfanum chars before @ or domain"
           
    elif test_1.isalnum() == False:
        return 2, "only contains alfanum chars before the @"

    #Part B: returns email address if valid within 2 to 8 characters
    if (re.search(test_2, s)):
        return 3, "must contain 2 - 8 alfanum chars before @ or domain"
       
    elif test_2.isalnum() == False:
        return 4, "only contains alfanum chars before the @ or domain"
    
    #Part C: email must contain at least com, edu, org, gov
    if R not in ["com", "edu", "org", "gov"]:
        return 5, "Domain name has invalid character, try again" 
    
    return None, "Code should run, nice job"


    

# This if ensures that the following is NOT run if this file was imported as a module (which we'll do next!)
if __name__ == "__main__":

    # tests, including edge cases (incomplete? add more!)
    email_list = ["charding@iastate.edu", 
        "chris.edu",
        "chris@edu",
        "@bla.edu",
        "throatwobblermangrove@mpfc.org", 
        "chris@X.com",
        "chris.harding@iastate.edu",
        "chris@pymart.biz",
        "chris@letsgo!.org",
        "chris@megasavings.org",
        "tc@tank.com",
        ]
    # validate each email from the list
    for e in email_list:
        r, s = is_valid_email_address(e) 
        if r == None:
            print(e, s) # OK
        else:
            print(f"{e} - error: {s}, error code: {r}") # Error

        